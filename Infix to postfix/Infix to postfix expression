#include <iostream>
#define MAX 100
using namespace std;

char stack[MAX], postfix[MAX], symbol[MAX];
int top = -1, j = 0;

void push(char element)
{
  if (top == MAX-1)
    cout << "Stack Overflow!" << endl;
  else
    stack[++top] = element;
}

char pop()
{
  char element;
  if (top == -1)
    cout << "Stack Underflow!" << endl;
  else
    element = stack[top--];
  return element;
}

int priority(char element)
{
  if (element == '^')
    return 5;
  else if (element == '*')
    return 4;
  else if (element == '/')
    return 3;
  else if (element == '+')
    return 2;
  else if (element == '-')
    return 1;
  else
    return 0;
}


void priority_check_on_stack(char a)
{
  if (a == '(')
    push(a);
  else if (a == ')')
  {
    while (stack[top] != '(')
    {
        postfix[j++] = pop();
    }
    top--;
  }
  else if ((priority(a) > priority(stack[top])) || (a == stack[top]))
    push(a);
  else if ((priority(a) != 0 && priority(stack[top]) != 0) && (priority(a) <= priority(stack[top])))
  {
    while ((priority(a) != 0 && priority(stack[top]) != 0) && (priority(a) <= priority(stack[top])))
      postfix[j++] = pop();
    push(a);
  }
}


int main() {
  int i = 0;
  cout << "Enter an infix expression : \n";
  cin >> symbol;
  while (symbol[i])
  {
    switch (symbol[i])
    {
      case '(':
      case ')':
      case '^':
      case '*':
      case '/':
      case '+':
      case '-':
        priority_check_on_stack(symbol[i]);
        break;
      default :
        postfix[j++] = symbol[i];
        break;
    }
    i++;
  }
  while (top != -1)
    postfix[j++] = pop();
  cout << "Postfix expression : " << postfix;
  return 0;
}


//a*b(c-d)/e+f*g
